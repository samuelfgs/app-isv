// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gerk99sqDLqAi3xSqDhGNs
// Component: gLt5fbNKMG
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: VJAoJHfiRt/component
import AvatarMenu from "../../AvatarMenu"; // plasmic-import: pyA9tk4uHk/component
import SpaceForFixed from "../../SpaceForFixed"; // plasmic-import: b-yBAoSFVG/component
import Footer from "../../Footer"; // plasmic-import: 4xq6KX_FCQ/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_devocional.module.css"; // plasmic-import: gerk99sqDLqAi3xSqDhGNs/projectcss
import sty from "./PlasmicCalendario.module.css"; // plasmic-import: gLt5fbNKMG/css

import ChevronLeftIcon from "./icons/PlasmicIcon__ChevronLeft"; // plasmic-import: Daa5zZP-A/icon
import ChevronRightIcon from "./icons/PlasmicIcon__ChevronRight"; // plasmic-import: hTfKAKd01/icon

export type PlasmicCalendario__VariantMembers = {};

export type PlasmicCalendario__VariantsArgs = {};
type VariantPropType = keyof PlasmicCalendario__VariantsArgs;
export const PlasmicCalendario__VariantProps = new Array<VariantPropType>();

export type PlasmicCalendario__ArgsType = {
  days?: any;
  months?: any;
};

type ArgPropType = keyof PlasmicCalendario__ArgsType;
export const PlasmicCalendario__ArgProps = new Array<ArgPropType>(
  "days",
  "months"
);

export type PlasmicCalendario__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<typeof Header>;
  link?: p.Flex<"a"> & Partial<LinkProps>;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultCalendarioProps {}

function PlasmicCalendario__RenderFunc(props: {
  variants: PlasmicCalendario__VariantsArgs;
  args: PlasmicCalendario__ArgsType;
  overrides: PlasmicCalendario__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          days: ["Dom", "Seg", "Ter", "Qua", "Qui", "Sex", "Sab"],
          months: [
            "Janeiro",
            "Fevereiro",
            "Março",
            "Abril",
            "Maio",
            "Junho",
            "Julho",
            "Agosto",
            "Setembro",
            "Outubro",
            "Novembro",
            "Dezembro"
          ]
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs = React.useMemo(
    () => [
      {
        path: "month",
        type: "private",
        initFunc: ($props, $state, $ctx) =>
          (() => {
            try {
              return (() => {
                const date = new Date(Date.now());
                return (date.getFullYear() - 2023) * 12 + date.getMonth();
              })();
            } catch (e) {
              if (e instanceof TypeError) {
                return 0;
              }
              throw e;
            }
          })()
      },

      {
        path: "delta",
        type: "private",
        initFunc: ($props, $state, $ctx) =>
          (() => {
            try {
              return (() => {
                const month = (($state.month % 12) + 12) % 12;
                const year = 2023 + Math.floor($state.month / 12);
                const date = new Date(year, month, 1);
                return date.getDay();
              })();
            } catch (e) {
              if (e instanceof TypeError) {
                return undefined;
              }
              throw e;
            }
          })()
      }
    ],

    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, $props, $ctx);

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__yLe4)}>
              <Header
                data-plasmic-name={"header"}
                data-plasmic-override={overrides.header}
                className={classNames("__wab_instance", sty.header)}
                slot={"Calendário"}
              />
            </div>
          ) : null}

          <SpaceForFixed
            className={classNames("__wab_instance", sty.spaceForFixed__mv3De)}
            height={70 as const}
          />

          <div className={classNames(projectcss.all, sty.freeBox__hrJjk)}>
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__xSxNj)}>
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__sGg5Q)}
                    onClick={async (...args) => {
                      const $steps = {};
                      $steps["Set month"] = true
                        ? (({ variable, value }) => {
                            p.set($state, variable, value);
                            return value;
                          }).apply(null, [
                            {
                              variable: "month" as const,

                              value: $state.month - 1
                            }
                          ])
                        : undefined;
                      if (
                        typeof $steps["Set month"] === "object" &&
                        typeof $steps["Set month"].then === "function"
                      ) {
                        $steps["Set month"] = await $steps["Set month"];
                      }
                    }}
                  >
                    <ChevronLeftIcon
                      className={classNames(projectcss.all, sty.svg__ygVt)}
                      role={"img"}
                    />
                  </div>
                ) : null}

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__cSFlt
                  )}
                >
                  {(() => {
                    const month = (($state.month % 12) + 12) % 12;
                    const year = 2023 + Math.floor($state.month / 12);
                    return `${$props.months[month]} de ${year}`;
                  })()}
                </div>

                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ysDjr)}
                    onClick={async (...args) => {
                      const $steps = {};
                      $steps["Set month"] = true
                        ? (({ variable, value }) => {
                            p.set($state, variable, value);
                            return value;
                          }).apply(null, [
                            {
                              variable: "month" as const,

                              value: $state.month + 1
                            }
                          ])
                        : undefined;
                      if (
                        typeof $steps["Set month"] === "object" &&
                        typeof $steps["Set month"].then === "function"
                      ) {
                        $steps["Set month"] = await $steps["Set month"];
                      }
                    }}
                  >
                    <ChevronRightIcon
                      className={classNames(projectcss.all, sty.svg__zsGi2)}
                      role={"img"}
                    />
                  </div>
                ) : null}
              </div>
            ) : null}

            <div className={classNames(projectcss.all, sty.freeBox__bMlSg)}>
              {(
                (() => {
                  try {
                    return $props.days;
                  } catch (e) {
                    if (e instanceof TypeError) {
                      return [];
                    }
                    throw e;
                  }
                })() ?? []
              ).map((currentItem, currentIndex) => (
                <div
                  className={classNames(projectcss.all, sty.freeBox___6MrcV)}
                  key={currentIndex}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__a1ErD
                    )}
                  >
                    {(() => {
                      try {
                        return currentItem;
                      } catch (e) {
                        if (e instanceof TypeError) {
                          return "Enter some text";
                        }
                        throw e;
                      }
                    })()}
                  </div>
                </div>
              ))}

              {(
                (() => {
                  try {
                    return [...Array(7 * 6).keys()];
                  } catch (e) {
                    if (e instanceof TypeError) {
                      return [];
                    }
                    throw e;
                  }
                })() ?? []
              ).map((currentItem, currentIndex) => (
                <p.PlasmicLink
                  data-plasmic-name={"link"}
                  data-plasmic-override={overrides.link}
                  className={classNames(projectcss.all, projectcss.a, sty.link)}
                  component={Link}
                  href={`/devocional/${(() => {
                    const month = (($state.month % 12) + 12) % 12;
                    const year = 2023 + Math.floor($state.month / 12);
                    const date = new Date(year, month, 1);
                    const newDate = new Date(
                      date.setDate(date.getDate() - $state.delta + currentIndex)
                    );
                    return newDate.getDate();
                  })()}/${(() => {
                    const month = (($state.month % 12) + 12) % 12;
                    const year = 2023 + Math.floor($state.month / 12);
                    const date = new Date(year, month, 1);
                    const newDate = new Date(
                      date.setDate(date.getDate() - $state.delta + currentIndex)
                    );
                    return newDate.getMonth();
                  })()}/${(() => {
                    const month = (($state.month % 12) + 12) % 12;
                    const year = 2023 + Math.floor($state.month / 12);
                    const date = new Date(year, month, 1);
                    const newDate = new Date(
                      date.setDate(date.getDate() - $state.delta + currentIndex)
                    );
                    return newDate.getFullYear();
                  })()}`}
                  key={currentIndex}
                  platform={"nextjs"}
                >
                  {(() => {
                    try {
                      return (() => {
                        const month = (($state.month % 12) + 12) % 12;
                        const year = 2023 + Math.floor($state.month / 12);
                        const date = new Date(year, month, 1);
                        const date2 = new Date(
                          date.setDate(
                            date.getDate() - $state.delta + currentIndex
                          )
                        );
                        return date2.getMonth() !== month;
                      })();
                    } catch (e) {
                      if (e instanceof TypeError) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__fBoGb
                      )}
                    >
                      {(() => {
                        const month = (($state.month % 12) + 12) % 12;
                        const year = 2023 + Math.floor($state.month / 12);
                        const date = new Date(year, month, 1);
                        return new Date(
                          date.setDate(
                            date.getDate() - $state.delta + currentIndex
                          )
                        ).getDate();
                      })()}
                    </div>
                  ) : null}
                  {(() => {
                    try {
                      return (() => {
                        const month = (($state.month % 12) + 12) % 12;
                        const year = 2023 + Math.floor($state.month / 12);
                        const date = new Date(year, month, 1);
                        const date2 = new Date(
                          date.setDate(
                            date.getDate() - $state.delta + currentIndex
                          )
                        );
                        return date2.getMonth() === month;
                      })();
                    } catch (e) {
                      if (e instanceof TypeError) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__slxVa
                      )}
                    >
                      {(() => {
                        const month = (($state.month % 12) + 12) % 12;
                        const year = 2023 + Math.floor($state.month / 12);
                        const date = new Date(year, month, 1);
                        return new Date(
                          date.setDate(
                            date.getDate() - $state.delta + currentIndex
                          )
                        ).getDate();
                      })()}
                    </div>
                  ) : null}
                  {true ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__bFls4)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__nklKw
                        )}
                      >
                        {"Título da mensagem"}
                      </div>
                    </div>
                  ) : null}
                </p.PlasmicLink>
              ))}
            </div>
          </div>

          <SpaceForFixed
            className={classNames("__wab_instance", sty.spaceForFixed___8Pgca)}
            height={70 as const}
          />

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "header", "link", "footer"],
  header: ["header"],
  link: ["link"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  link: "a";
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCalendario__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCalendario__VariantsArgs;
    args?: PlasmicCalendario__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCalendario__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCalendario__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicCalendario__ArgProps,
          internalVariantPropNames: PlasmicCalendario__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicCalendario__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCalendario";
  } else {
    func.displayName = `PlasmicCalendario.${nodeName}`;
  }
  return func;
}

export const PlasmicCalendario = Object.assign(
  // Top-level PlasmicCalendario renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    link: makeNodeComponent("link"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicCalendario
    internalVariantProps: PlasmicCalendario__VariantProps,
    internalArgProps: PlasmicCalendario__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicCalendario;
/* prettier-ignore-end */
