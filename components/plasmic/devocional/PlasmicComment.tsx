// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gerk99sqDLqAi3xSqDhGNs
// Component: d1IXvSf1Cl
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { SupabaseFetcher } from "../../supabase/supabase"; // plasmic-import: HX-SzYOed0/codeComponent
import Avatar from "../../Avatar"; // plasmic-import: Zx9A6DxqtB/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_devocional.module.css"; // plasmic-import: gerk99sqDLqAi3xSqDhGNs/projectcss
import sty from "./PlasmicComment.module.css"; // plasmic-import: d1IXvSf1Cl/css

export type PlasmicComment__VariantMembers = {};

export type PlasmicComment__VariantsArgs = {};
type VariantPropType = keyof PlasmicComment__VariantsArgs;
export const PlasmicComment__VariantProps = new Array<VariantPropType>();

export type PlasmicComment__ArgsType = {
  cid?: string;
};

type ArgPropType = keyof PlasmicComment__ArgsType;
export const PlasmicComment__ArgProps = new Array<ArgPropType>("cid");

export type PlasmicComment__OverridesType = {
  root?: p.Flex<"div">;
  avatar?: p.Flex<typeof Avatar>;
};

export interface DefaultCommentProps {
  cid?: string;
  className?: string;
}

function PlasmicComment__RenderFunc(props: {
  variants: PlasmicComment__VariantsArgs;
  args: PlasmicComment__ArgsType;
  overrides: PlasmicComment__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          cid: "3" as const
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <SupabaseFetcher
        className={classNames("__wab_instance", sty.supabaseFetcher__hCcmh)}
        filters={(() => {
          try {
            return [
              {
                column: "id",
                operator: "eq",
                value: $props.cid
              }
            ];
          } catch (e) {
            if (e instanceof TypeError) {
              return undefined;
            }
            throw e;
          }
        })()}
        name={"comment" as const}
        table={"comments" as const}
      >
        <ph.DataCtxReader>
          {$ctx => (
            <SupabaseFetcher
              className={classNames(
                "__wab_instance",
                sty.supabaseFetcher__d3MyL
              )}
              filters={(() => {
                try {
                  return [
                    {
                      column: "id",
                      operator: "eq",
                      value: $ctx.comment[0].author_id
                    }
                  ];
                } catch (e) {
                  if (e instanceof TypeError) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              name={"profile" as const}
              table={"profiles" as const}
            >
              <ph.DataCtxReader>
                {$ctx => (
                  <React.Fragment>
                    {true ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___2R5Mz
                        )}
                      >
                        {true ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__hbMc
                            )}
                          >
                            <Avatar
                              data-plasmic-name={"avatar"}
                              data-plasmic-override={overrides.avatar}
                              className={classNames(
                                "__wab_instance",
                                sty.avatar
                              )}
                              url={(() => {
                                try {
                                  return $ctx.profile[0].avatar_url;
                                } catch (e) {
                                  if (e instanceof TypeError) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                            />
                          </div>
                        ) : null}
                      </div>
                    ) : null}
                    {true ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__hQf0
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__wm0Dy
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__lL8JB
                            )}
                          >
                            {(() => {
                              try {
                                return $ctx.profile[0].name;
                              } catch (e) {
                                if (e instanceof TypeError) {
                                  return "Disc√≠pulo X";
                                }
                                throw e;
                              }
                            })()}
                          </div>
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__g8Trr
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__p0Pun
                            )}
                          >
                            {(() => {
                              try {
                                return $ctx.comment[0].text;
                              } catch (e) {
                                if (e instanceof TypeError) {
                                  return "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the ";
                                }
                                throw e;
                              }
                            })()}
                          </div>
                        </div>
                      </p.Stack>
                    ) : null}
                  </React.Fragment>
                )}
              </ph.DataCtxReader>
            </SupabaseFetcher>
          )}
        </ph.DataCtxReader>
      </SupabaseFetcher>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "avatar"],
  avatar: ["avatar"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  avatar: typeof Avatar;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicComment__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicComment__VariantsArgs;
    args?: PlasmicComment__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicComment__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicComment__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicComment__ArgProps,
          internalVariantPropNames: PlasmicComment__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicComment__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicComment";
  } else {
    func.displayName = `PlasmicComment.${nodeName}`;
  }
  return func;
}

export const PlasmicComment = Object.assign(
  // Top-level PlasmicComment renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    avatar: makeNodeComponent("avatar"),

    // Metadata about props expected for PlasmicComment
    internalVariantProps: PlasmicComment__VariantProps,
    internalArgProps: PlasmicComment__ArgProps
  }
);

export default PlasmicComment;
/* prettier-ignore-end */
