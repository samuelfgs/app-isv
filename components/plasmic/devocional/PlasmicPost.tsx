// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gerk99sqDLqAi3xSqDhGNs
// Component: az5Tv6-qkFR
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Comment from "../../Comment"; // plasmic-import: d1IXvSf1Cl/component
import Avatar from "../../Avatar"; // plasmic-import: Zx9A6DxqtB/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_devocional.module.css"; // plasmic-import: gerk99sqDLqAi3xSqDhGNs/projectcss
import sty from "./PlasmicPost.module.css"; // plasmic-import: az5Tv6-qkFR/css

import LikeIcon from "./icons/PlasmicIcon__Like"; // plasmic-import: E0yJQNlPk9/icon
import CommentIcon from "./icons/PlasmicIcon__Comment"; // plasmic-import: X_VrYnSbgs/icon

export type PlasmicPost__VariantMembers = {};

export type PlasmicPost__VariantsArgs = {};
type VariantPropType = keyof PlasmicPost__VariantsArgs;
export const PlasmicPost__VariantProps = new Array<VariantPropType>();

export type PlasmicPost__ArgsType = {
  author?: React.ReactNode;
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicPost__ArgsType;
export const PlasmicPost__ArgProps = new Array<ArgPropType>(
  "author",
  "children"
);

export type PlasmicPost__OverridesType = {
  root?: p.Flex<"div">;
  comment?: p.Flex<typeof Comment>;
  avatar?: p.Flex<typeof Avatar>;
};

export interface DefaultPostProps {
  author?: React.ReactNode;
  children?: React.ReactNode;
  className?: string;
}

function PlasmicPost__RenderFunc(props: {
  variants: PlasmicPost__VariantsArgs;
  args: PlasmicPost__ArgsType;
  overrides: PlasmicPost__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    true ? (
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          sty.root
        )}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__rbzNj)}
        >
          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__lInOb)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__gm0B4)}>
                {p.renderPlasmicSlot({
                  defaultContents: "Palavra do Beda",
                  value: args.author,
                  className: classNames(sty.slotTargetAuthor)
                })}
              </div>

              <div className={classNames(projectcss.all, sty.freeBox___6Obqd)}>
                {p.renderPlasmicSlot({
                  defaultContents:
                    "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.",
                  value: args.children,
                  className: classNames(sty.slotTargetChildren)
                })}
              </div>
            </p.Stack>
          ) : null}
          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__mUf1)}>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___93Wdc)}
              >
                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___2LWq)}
                  >
                    <LikeIcon
                      className={classNames(projectcss.all, sty.svg___6OaGh)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__jN30V
                      )}
                    >
                      {"Curtir"}
                    </div>
                  </p.Stack>
                ) : null}
                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__rkIz9)}
                  >
                    <CommentIcon
                      className={classNames(projectcss.all, sty.svg__g1Int)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__r0Npy
                      )}
                    >
                      {"Comentar"}
                    </div>
                  </p.Stack>
                ) : null}
              </p.Stack>

              <div className={classNames(projectcss.all, sty.freeBox__n0PW)}>
                {(
                  (() => {
                    try {
                      return [...Array(3).keys()];
                    } catch (e) {
                      if (e instanceof TypeError) {
                        return [];
                      }
                      throw e;
                    }
                  })() ?? []
                ).map((currentItem, currentIndex) => (
                  <Comment
                    data-plasmic-name={"comment"}
                    data-plasmic-override={overrides.comment}
                    avatar={
                      <Avatar
                        data-plasmic-name={"avatar"}
                        data-plasmic-override={overrides.avatar}
                        className={classNames("__wab_instance", sty.avatar)}
                      />
                    }
                    className={classNames("__wab_instance", sty.comment)}
                    key={currentIndex}
                  />
                ))}
              </div>
            </div>
          ) : null}
        </p.Stack>
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "comment", "avatar"],
  comment: ["comment", "avatar"],
  avatar: ["avatar"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  comment: typeof Comment;
  avatar: typeof Avatar;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPost__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPost__VariantsArgs;
    args?: PlasmicPost__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPost__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPost__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicPost__ArgProps,
          internalVariantPropNames: PlasmicPost__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicPost__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPost";
  } else {
    func.displayName = `PlasmicPost.${nodeName}`;
  }
  return func;
}

export const PlasmicPost = Object.assign(
  // Top-level PlasmicPost renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    comment: makeNodeComponent("comment"),
    avatar: makeNodeComponent("avatar"),

    // Metadata about props expected for PlasmicPost
    internalVariantProps: PlasmicPost__VariantProps,
    internalArgProps: PlasmicPost__ArgProps
  }
);

export default PlasmicPost;
/* prettier-ignore-end */
