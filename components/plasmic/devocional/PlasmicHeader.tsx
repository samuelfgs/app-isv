// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gerk99sqDLqAi3xSqDhGNs
// Component: VJAoJHfiRt
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Avatar from "../../Avatar"; // plasmic-import: Zx9A6DxqtB/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_devocional.module.css"; // plasmic-import: gerk99sqDLqAi3xSqDhGNs/projectcss
import sty from "./PlasmicHeader.module.css"; // plasmic-import: VJAoJHfiRt/css

export type PlasmicHeader__VariantMembers = {
  biblePage: "biblePage";
};

export type PlasmicHeader__VariantsArgs = {
  biblePage?: SingleBooleanChoiceArg<"biblePage">;
};

type VariantPropType = keyof PlasmicHeader__VariantsArgs;
export const PlasmicHeader__VariantProps = new Array<VariantPropType>(
  "biblePage"
);

export type PlasmicHeader__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  onBookClick?: string;
};

type ArgPropType = keyof PlasmicHeader__ArgsType;
export const PlasmicHeader__ArgProps = new Array<ArgPropType>(
  "children",
  "slot",
  "onBookClick"
);

export type PlasmicHeader__OverridesType = {
  root?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
  avatar?: p.Flex<typeof Avatar>;
  text?: p.Flex<"div">;
};

export interface DefaultHeaderProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  onBookClick?: string;
  biblePage?: SingleBooleanChoiceArg<"biblePage">;
  className?: string;
}

function PlasmicHeader__RenderFunc(props: {
  variants: PlasmicHeader__VariantsArgs;
  args: PlasmicHeader__ArgsType;
  overrides: PlasmicHeader__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs = React.useMemo(
    () => [
      {
        path: "biblePage",
        type: "private",
        initFunc: ($props, $state, $ctx) => $props.biblePage
      }
    ],

    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, $props, $ctx);

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        { [sty.rootbiblePage]: hasVariant($state, "biblePage", "biblePage") }
      )}
    >
      <p.PlasmicImg
        data-plasmic-name={"img"}
        data-plasmic-override={overrides.img}
        alt={""}
        className={classNames(sty.img, {
          [sty.imgbiblePage]: hasVariant($state, "biblePage", "biblePage")
        })}
        displayHeight={"30px" as const}
        displayMaxHeight={"none" as const}
        displayMaxWidth={"100%" as const}
        displayMinHeight={"0" as const}
        displayMinWidth={"0" as const}
        displayWidth={"50px" as const}
        loading={"lazy" as const}
        src={{
          src: "/plasmic/devocional/images/isv.png",
          fullWidth: 504,
          fullHeight: 318,
          aspectRatio: undefined
        }}
      />

      {(hasVariant($state, "biblePage", "biblePage") ? true : true) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__keRq5, {
            [sty.freeBoxbiblePage__keRq5R33Jt]: hasVariant(
              $state,
              "biblePage",
              "biblePage"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: "Devocionais",
            value: args.slot,
            className: classNames(sty.slotTargetSlot)
          })}
        </div>
      ) : null}
      {(hasVariant($state, "biblePage", "biblePage") ? true : true) ? (
        <Avatar
          data-plasmic-name={"avatar"}
          data-plasmic-override={overrides.avatar}
          className={classNames("__wab_instance", sty.avatar, {
            [sty.avatarbiblePage]: hasVariant($state, "biblePage", "biblePage")
          })}
        />
      ) : null}
      {(hasVariant($state, "biblePage", "biblePage") ? true : true) ? (
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__pKjKg, {
            [sty.freeBoxbiblePage__pKjKGr33Jt]: hasVariant(
              $state,
              "biblePage",
              "biblePage"
            )
          })}
        >
          {(hasVariant($state, "biblePage", "biblePage") ? true : true) ? (
            <div
              className={classNames(projectcss.all, sty.freeBox__pInhp, {
                [sty.freeBoxbiblePage__pInhPr33Jt]: hasVariant(
                  $state,
                  "biblePage",
                  "biblePage"
                )
              })}
              onClick={async (...args) => {
                const $steps = {};
                $steps["Custom function"] = true
                  ? (({ customFunction }) => {
                      return customFunction(...args);
                    }).apply(null, [
                      {
                        customFunction: () => {
                          $props.onBookClick();
                        }
                      }
                    ])
                  : undefined;
                if (
                  typeof $steps["Custom function"] === "object" &&
                  typeof $steps["Custom function"].then === "function"
                ) {
                  $steps["Custom function"] = await $steps["Custom function"];
                }
              }}
            >
              {p.renderPlasmicSlot({
                defaultContents: (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gLoA
                    )}
                  >
                    {"Genesis 1"}
                  </div>
                ),

                value: args.children
              })}
            </div>
          ) : null}
          {(hasVariant($state, "biblePage", "biblePage") ? true : true) ? (
            <div
              className={classNames(projectcss.all, sty.freeBox__a76Sx, {
                [sty.freeBoxbiblePage__a76Sxr33Jt]: hasVariant(
                  $state,
                  "biblePage",
                  "biblePage"
                )
              })}
            >
              <div
                data-plasmic-name={"text"}
                data-plasmic-override={overrides.text}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text,
                  {
                    [sty.textbiblePage]: hasVariant(
                      $state,
                      "biblePage",
                      "biblePage"
                    )
                  }
                )}
              >
                {"NVI"}
              </div>
            </div>
          ) : null}
        </p.Stack>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "img", "avatar", "text"],
  img: ["img"],
  avatar: ["avatar"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: typeof p.PlasmicImg;
  avatar: typeof Avatar;
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHeader__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHeader__VariantsArgs;
    args?: PlasmicHeader__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHeader__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHeader__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHeader__ArgProps,
          internalVariantPropNames: PlasmicHeader__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHeader__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHeader";
  } else {
    func.displayName = `PlasmicHeader.${nodeName}`;
  }
  return func;
}

export const PlasmicHeader = Object.assign(
  // Top-level PlasmicHeader renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    avatar: makeNodeComponent("avatar"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicHeader
    internalVariantProps: PlasmicHeader__VariantProps,
    internalArgProps: PlasmicHeader__ArgProps
  }
);

export default PlasmicHeader;
/* prettier-ignore-end */
