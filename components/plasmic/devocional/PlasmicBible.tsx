// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gerk99sqDLqAi3xSqDhGNs
// Component: TPLQbpBjjU
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { Fetcher } from "../../../pages/plasmic-host"; // plasmic-import: LxGfpzwDwn/codeComponent
import Header from "../../Header"; // plasmic-import: VJAoJHfiRt/component
import Footer from "../../Footer"; // plasmic-import: 4xq6KX_FCQ/component
import SelectChapter from "../../SelectChapter"; // plasmic-import: B3F684OR7c/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_devocional.module.css"; // plasmic-import: gerk99sqDLqAi3xSqDhGNs/projectcss
import sty from "./PlasmicBible.module.css"; // plasmic-import: TPLQbpBjjU/css

import ChevronLeftIcon from "./icons/PlasmicIcon__ChevronLeft"; // plasmic-import: Daa5zZP-A/icon
import ChevronRightIcon from "./icons/PlasmicIcon__ChevronRight"; // plasmic-import: hTfKAKd01/icon

export type PlasmicBible__VariantMembers = {};

export type PlasmicBible__VariantsArgs = {};
type VariantPropType = keyof PlasmicBible__VariantsArgs;
export const PlasmicBible__VariantProps = new Array<VariantPropType>();

export type PlasmicBible__ArgsType = {};
type ArgPropType = keyof PlasmicBible__ArgsType;
export const PlasmicBible__ArgProps = new Array<ArgPropType>();

export type PlasmicBible__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<typeof Header>;
  footer?: p.Flex<typeof Footer>;
  selectChapter?: p.Flex<typeof SelectChapter>;
};

export interface DefaultBibleProps {}

function PlasmicBible__RenderFunc(props: {
  variants: PlasmicBible__VariantsArgs;
  args: PlasmicBible__ArgsType;
  overrides: PlasmicBible__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs = React.useMemo(
    () => [
      {
        path: "shouldHideSelectChapter",
        type: "private",
        initFunc: ($props, $state, $ctx) => true
      }
    ],

    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, $props, $ctx);

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          {(() => {
            try {
              return $state.shouldHideSelectChapter;
            } catch (e) {
              if (e instanceof TypeError) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div className={classNames(projectcss.all, sty.freeBox__dQYl)}>
              <Fetcher
                className={classNames("__wab_instance", sty.fetcher___3M2Ct)}
                endpoint={"books" as const}
                name={"books" as const}
              >
                <ph.DataCtxReader>
                  {$ctx => (
                    <React.Fragment>
                      <Header
                        data-plasmic-name={"header"}
                        data-plasmic-override={overrides.header}
                        biblePage={true}
                        className={classNames("__wab_instance", sty.header)}
                        onBookClick={async (...args) => {
                          const $steps = {};
                          $steps["Set shouldHideSelectChapter"] = true
                            ? (({ variable, value }) => {
                                p.set($state, variable, value);
                                return value;
                              }).apply(null, [
                                {
                                  variable: "shouldHideSelectChapter" as const,

                                  value: false
                                }
                              ])
                            : undefined;
                          if (
                            typeof $steps["Set shouldHideSelectChapter"] ===
                              "object" &&
                            typeof $steps["Set shouldHideSelectChapter"]
                              .then === "function"
                          ) {
                            $steps["Set shouldHideSelectChapter"] =
                              await $steps["Set shouldHideSelectChapter"];
                          }
                        }}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___2UnWq
                          )}
                        >
                          {(() => {
                            try {
                              return (() => {
                                const book = $ctx.books.find(
                                  book => book.abbrev === $ctx.params.book
                                );
                                if (book) {
                                  return `${book.name} ${$ctx.params.chapter}`;
                                }
                                return "undefined";
                              })();
                            } catch (e) {
                              if (e instanceof TypeError) {
                                return "Genesis 1";
                              }
                              throw e;
                            }
                          })()}
                        </div>
                      </Header>

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__dBhtq
                        )}
                      />

                      {true ? (
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__vMqOr
                          )}
                        >
                          <Fetcher
                            className={classNames(
                              "__wab_instance",
                              sty.fetcher__ki0Gl
                            )}
                            endpoint={(() => {
                              try {
                                return `${$ctx.params.version}/${$ctx.params.book}/${$ctx.params.chapter}`;
                              } catch (e) {
                                if (e instanceof TypeError) {
                                  return "books";
                                }
                                throw e;
                              }
                            })()}
                          >
                            <ph.DataCtxReader>
                              {$ctx => (
                                <React.Fragment>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__eOr4L
                                    )}
                                  >
                                    {(() => {
                                      try {
                                        return undefined;
                                      } catch (e) {
                                        if (e instanceof TypeError) {
                                          return "Enter some text";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </div>

                                  {(
                                    (() => {
                                      try {
                                        return $ctx.fetchedData;
                                      } catch (e) {
                                        if (e instanceof TypeError) {
                                          return [];
                                        }
                                        throw e;
                                      }
                                    })() ?? []
                                  ).map((currentItem, currentIndex) => (
                                    <p.Stack
                                      as={"div"}
                                      hasGap={true}
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__iZ3Ap
                                      )}
                                      key={currentIndex}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__o5U
                                        )}
                                      >
                                        {(() => {
                                          try {
                                            return currentIndex + 1;
                                          } catch (e) {
                                            if (e instanceof TypeError) {
                                              return "Enter some text";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </div>

                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__ihaei
                                        )}
                                      >
                                        {(() => {
                                          try {
                                            return currentItem;
                                          } catch (e) {
                                            if (e instanceof TypeError) {
                                              return "Enter some text";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </div>
                                    </p.Stack>
                                  ))}
                                </React.Fragment>
                              )}
                            </ph.DataCtxReader>
                          </Fetcher>
                        </p.Stack>
                      ) : null}

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__nC5By
                        )}
                      >
                        {true ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__toOfn
                            )}
                          >
                            {(() => {
                              try {
                                return (() => {
                                  const chapter = +$ctx.params.chapter;
                                  const bookIndex = $ctx.books.findIndex(
                                    book => book.abbrev === $ctx.params.book
                                  );
                                  if (!isNaN(chapter) && bookIndex !== -1) {
                                    return bookIndex !== 0 || chapter !== 1;
                                  }
                                })();
                              } catch (e) {
                                if (e instanceof TypeError) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <p.PlasmicLink
                                className={classNames(
                                  projectcss.all,
                                  projectcss.a,
                                  sty.link__d39F
                                )}
                                component={Link}
                                href={`/bible/${"nvi"}/${(() => {
                                  try {
                                    return (() => {
                                      const chapter = +$ctx.params.chapter;
                                      const bookIndex = $ctx.books.findIndex(
                                        book => book.abbrev === $ctx.params.book
                                      );
                                      if (!isNaN(chapter) && bookIndex !== -1) {
                                        const book = $ctx.books[bookIndex];
                                        if (chapter !== 1) {
                                          return $ctx.params.book;
                                        } else if (bookIndex !== 0) {
                                          return $ctx.books[bookIndex - 1]
                                            .abbrev;
                                        }
                                      }
                                    })();
                                  } catch (e) {
                                    if (e instanceof TypeError) {
                                      return "gn";
                                    }
                                    throw e;
                                  }
                                })()}/${(() => {
                                  try {
                                    return (() => {
                                      const chapter = +$ctx.params.chapter;
                                      const bookIndex = $ctx.books.findIndex(
                                        book => book.abbrev === $ctx.params.book
                                      );
                                      if (!isNaN(chapter) && bookIndex !== -1) {
                                        const book = $ctx.books[bookIndex];
                                        if (chapter !== 1) {
                                          return chapter - 1;
                                        } else if (bookIndex !== 0) {
                                          return $ctx.books[bookIndex - 1]
                                            .chapters;
                                        }
                                      }
                                    })();
                                  } catch (e) {
                                    if (e instanceof TypeError) {
                                      return "1";
                                    }
                                    throw e;
                                  }
                                })()}`}
                                platform={"nextjs"}
                              >
                                <ChevronLeftIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__qyVms
                                  )}
                                  role={"img"}
                                />
                              </p.PlasmicLink>
                            ) : null}
                          </div>
                        ) : null}
                        {true ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__mgc0B
                            )}
                          >
                            {(() => {
                              try {
                                return (() => {
                                  const chapter = +$ctx.params.chapter;
                                  const bookIndex = $ctx.books.findIndex(
                                    book => book.abbrev === $ctx.params.book
                                  );
                                  if (!isNaN(chapter) && bookIndex !== -1) {
                                    return (
                                      bookIndex + 1 !== $ctx.books.length ||
                                      chapter !== $ctx.books[bookIndex].chapters
                                    );
                                  }
                                })();
                              } catch (e) {
                                if (e instanceof TypeError) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <p.PlasmicLink
                                className={classNames(
                                  projectcss.all,
                                  projectcss.a,
                                  sty.link__hhXtv
                                )}
                                component={Link}
                                href={`/bible/${"nvi"}/${(() => {
                                  try {
                                    return (() => {
                                      const chapter = +$ctx.params.chapter;
                                      const bookIndex = $ctx.books.findIndex(
                                        book => book.abbrev === $ctx.params.book
                                      );
                                      if (!isNaN(chapter) && bookIndex !== -1) {
                                        const book = $ctx.books[bookIndex];
                                        if (chapter !== book.chapters) {
                                          return $ctx.params.book;
                                        } else if (
                                          $ctx.books.length + 1 !==
                                          bookIndex
                                        ) {
                                          return $ctx.books[bookIndex + 1]
                                            .abbrev;
                                        }
                                      }
                                    })();
                                  } catch (e) {
                                    if (e instanceof TypeError) {
                                      return "gn";
                                    }
                                    throw e;
                                  }
                                })()}/${(() => {
                                  try {
                                    return (() => {
                                      const chapter = +$ctx.params.chapter;
                                      const bookIndex = $ctx.books.findIndex(
                                        book => book.abbrev === $ctx.params.book
                                      );
                                      if (!isNaN(chapter) && bookIndex !== -1) {
                                        const book = $ctx.books[bookIndex];
                                        if (chapter !== book.chapters) {
                                          return chapter + 1;
                                        } else if (
                                          $ctx.books.length + 1 !==
                                          bookIndex
                                        ) {
                                          return 1;
                                        }
                                      }
                                    })();
                                  } catch (e) {
                                    if (e instanceof TypeError) {
                                      return "1";
                                    }
                                    throw e;
                                  }
                                })()}`}
                                platform={"nextjs"}
                              >
                                <ChevronRightIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__jPaR
                                  )}
                                  role={"img"}
                                />
                              </p.PlasmicLink>
                            ) : null}
                          </div>
                        ) : null}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__vDstY
                        )}
                      />

                      <Footer
                        data-plasmic-name={"footer"}
                        data-plasmic-override={overrides.footer}
                        className={classNames("__wab_instance", sty.footer)}
                      />
                    </React.Fragment>
                  )}
                </ph.DataCtxReader>
              </Fetcher>
            </div>
          ) : null}
          {(() => {
            try {
              return !$state.shouldHideSelectChapter;
            } catch (e) {
              if (e instanceof TypeError) {
                return true;
              }
              throw e;
            }
          })() ? (
            <SelectChapter
              data-plasmic-name={"selectChapter"}
              data-plasmic-override={overrides.selectChapter}
              className={classNames("__wab_instance", sty.selectChapter)}
              onCancelClick={async (...args) => {
                const $steps = {};
                $steps["Set shouldHideSelectChapter"] = true
                  ? (({ variable, value }) => {
                      p.set($state, variable, value);
                      return value;
                    }).apply(null, [
                      {
                        variable: "shouldHideSelectChapter" as const,

                        value: true
                      }
                    ])
                  : undefined;
                if (
                  typeof $steps["Set shouldHideSelectChapter"] === "object" &&
                  typeof $steps["Set shouldHideSelectChapter"].then ===
                    "function"
                ) {
                  $steps["Set shouldHideSelectChapter"] = await $steps[
                    "Set shouldHideSelectChapter"
                  ];
                }
              }}
              onChapterClick={async (...args) => {
                const $steps = {};
                $steps["Set shouldHideSelectChapter"] = true
                  ? (({ variable, value }) => {
                      p.set($state, variable, value);
                      return value;
                    }).apply(null, [
                      {
                        variable: "shouldHideSelectChapter" as const,

                        value: true
                      }
                    ])
                  : undefined;
                if (
                  typeof $steps["Set shouldHideSelectChapter"] === "object" &&
                  typeof $steps["Set shouldHideSelectChapter"].then ===
                    "function"
                ) {
                  $steps["Set shouldHideSelectChapter"] = await $steps[
                    "Set shouldHideSelectChapter"
                  ];
                }
              }}
            />
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "header", "footer", "selectChapter"],
  header: ["header"],
  footer: ["footer"],
  selectChapter: ["selectChapter"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  footer: typeof Footer;
  selectChapter: typeof SelectChapter;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBible__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBible__VariantsArgs;
    args?: PlasmicBible__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBible__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicBible__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicBible__ArgProps,
          internalVariantPropNames: PlasmicBible__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicBible__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBible";
  } else {
    func.displayName = `PlasmicBible.${nodeName}`;
  }
  return func;
}

export const PlasmicBible = Object.assign(
  // Top-level PlasmicBible renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    footer: makeNodeComponent("footer"),
    selectChapter: makeNodeComponent("selectChapter"),

    // Metadata about props expected for PlasmicBible
    internalVariantProps: PlasmicBible__VariantProps,
    internalArgProps: PlasmicBible__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicBible;
/* prettier-ignore-end */
