// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gerk99sqDLqAi3xSqDhGNs
// Component: B3F684OR7c
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { Fetcher } from "../../../pages/plasmic-host"; // plasmic-import: LxGfpzwDwn/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_devocional.module.css"; // plasmic-import: gerk99sqDLqAi3xSqDhGNs/projectcss
import sty from "./PlasmicSelectChapter.module.css"; // plasmic-import: B3F684OR7c/css

import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: znmH5d3Ur/icon

export type PlasmicSelectChapter__VariantMembers = {};

export type PlasmicSelectChapter__VariantsArgs = {};
type VariantPropType = keyof PlasmicSelectChapter__VariantsArgs;
export const PlasmicSelectChapter__VariantProps = new Array<VariantPropType>();

export type PlasmicSelectChapter__ArgsType = {
  onCancelClick?: string;
  onChapterClick?: string;
};

type ArgPropType = keyof PlasmicSelectChapter__ArgsType;
export const PlasmicSelectChapter__ArgProps = new Array<ArgPropType>(
  "onCancelClick",
  "onChapterClick"
);

export type PlasmicSelectChapter__OverridesType = {
  root?: p.Flex<"div">;
  fetcher?: p.Flex<typeof Fetcher>;
  svg?: p.Flex<"svg">;
  link?: p.Flex<"a"> & Partial<LinkProps>;
};

export interface DefaultSelectChapterProps {
  onCancelClick?: string;
  onChapterClick?: string;
  className?: string;
}

function PlasmicSelectChapter__RenderFunc(props: {
  variants: PlasmicSelectChapter__VariantsArgs;
  args: PlasmicSelectChapter__ArgsType;
  overrides: PlasmicSelectChapter__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs = React.useMemo(
    () => [
      {
        path: "selectedBook",
        type: "private",
        initFunc: ($props, $state, $ctx) => -1 as const
      }
    ],

    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, $props, $ctx);

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__jyu25)}>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__yrSgp
          )}
          onClick={async (...args) => {
            const $steps = {};
            $steps["Custom function"] = true
              ? (({ customFunction }) => {
                  return customFunction(...args);
                }).apply(null, [
                  {
                    customFunction: () => {
                      $props.onCancelClick();
                    }
                  }
                ])
              : undefined;
            if (
              typeof $steps["Custom function"] === "object" &&
              typeof $steps["Custom function"].then === "function"
            ) {
              $steps["Custom function"] = await $steps["Custom function"];
            }
          }}
        >
          {"Cancelar"}
        </div>

        {true ? (
          <div className={classNames(projectcss.all, sty.freeBox__ihuDw)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__vcqzu
              )}
            >
              {"Livros"}
            </div>
          </div>
        ) : null}
      </div>

      <div className={classNames(projectcss.all, sty.freeBox__mwkEj)} />

      <Fetcher
        data-plasmic-name={"fetcher"}
        data-plasmic-override={overrides.fetcher}
        className={classNames("__wab_instance", sty.fetcher)}
        endpoint={"books" as const}
        name={"books" as const}
      >
        <ph.DataCtxReader>
          {$ctx =>
            true
              ? (
                  (() => {
                    try {
                      return $ctx.books;
                    } catch (e) {
                      if (e instanceof TypeError) {
                        return [];
                      }
                      throw e;
                    }
                  })() ?? []
                ).map((currentBook, currentBookIndex) => (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__mF0Nl)}
                    key={currentBookIndex}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___2HvuW
                      )}
                      onClick={async (...args) => {
                        const $steps = {};
                        $steps["Set selectedBook"] = true
                          ? (({ variable, value }) => {
                              p.set($state, variable, value);
                              return value;
                            }).apply(null, [
                              {
                                variable: "selectedBook" as const,

                                value:
                                  currentBookIndex === $state.selectedBook
                                    ? undefined
                                    : currentBookIndex
                              }
                            ])
                          : undefined;
                        if (
                          typeof $steps["Set selectedBook"] === "object" &&
                          typeof $steps["Set selectedBook"].then === "function"
                        ) {
                          $steps["Set selectedBook"] = await $steps[
                            "Set selectedBook"
                          ];
                        }
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__eNsUv
                        )}
                      >
                        {(() => {
                          try {
                            return currentBook.name;
                          } catch (e) {
                            if (e instanceof TypeError) {
                              return "Enter some text";
                            }
                            throw e;
                          }
                        })()}
                      </div>

                      <ChevronDownIcon
                        data-plasmic-name={"svg"}
                        data-plasmic-override={overrides.svg}
                        className={classNames(projectcss.all, sty.svg)}
                        role={"img"}
                      />
                    </div>

                    {(() => {
                      try {
                        return $state.selectedBook === currentBookIndex;
                      } catch (e) {
                        if (e instanceof TypeError) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ndjMl
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__wCzl1
                          )}
                        >
                          {(
                            (() => {
                              try {
                                return [...Array(currentBook.chapters).keys()];
                              } catch (e) {
                                if (e instanceof TypeError) {
                                  return [];
                                }
                                throw e;
                              }
                            })() ?? []
                          ).map((currentChapter, currentIndex) => (
                            <p.PlasmicLink
                              data-plasmic-name={"link"}
                              data-plasmic-override={overrides.link}
                              className={classNames(
                                projectcss.all,
                                projectcss.a,
                                sty.link
                              )}
                              component={Link}
                              href={`/bible/${"nvi"}/${currentBook.abbrev}/${
                                currentChapter + 1
                              }`}
                              key={currentIndex}
                              onClick={async (...args) => {
                                const $steps = {};
                                $steps["Custom function"] = true
                                  ? (({ customFunction }) => {
                                      return customFunction(...args);
                                    }).apply(null, [
                                      {
                                        customFunction: () => {
                                          $props.onChapterClick();
                                        }
                                      }
                                    ])
                                  : undefined;
                                if (
                                  typeof $steps["Custom function"] ===
                                    "object" &&
                                  typeof $steps["Custom function"].then ===
                                    "function"
                                ) {
                                  $steps["Custom function"] = await $steps[
                                    "Custom function"
                                  ];
                                }
                              }}
                              platform={"nextjs"}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__q388S
                                )}
                              >
                                {(() => {
                                  try {
                                    return currentChapter + 1;
                                  } catch (e) {
                                    if (e instanceof TypeError) {
                                      return "Enter some text";
                                    }
                                    throw e;
                                  }
                                })()}
                              </div>
                            </p.PlasmicLink>
                          ))}
                        </div>
                      </div>
                    ) : null}
                  </div>
                ))
              : null
          }
        </ph.DataCtxReader>
      </Fetcher>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "fetcher", "svg", "link"],
  fetcher: ["fetcher", "svg", "link"],
  svg: ["svg"],
  link: ["link"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  fetcher: typeof Fetcher;
  svg: "svg";
  link: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSelectChapter__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSelectChapter__VariantsArgs;
    args?: PlasmicSelectChapter__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSelectChapter__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSelectChapter__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicSelectChapter__ArgProps,
          internalVariantPropNames: PlasmicSelectChapter__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicSelectChapter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSelectChapter";
  } else {
    func.displayName = `PlasmicSelectChapter.${nodeName}`;
  }
  return func;
}

export const PlasmicSelectChapter = Object.assign(
  // Top-level PlasmicSelectChapter renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    fetcher: makeNodeComponent("fetcher"),
    svg: makeNodeComponent("svg"),
    link: makeNodeComponent("link"),

    // Metadata about props expected for PlasmicSelectChapter
    internalVariantProps: PlasmicSelectChapter__VariantProps,
    internalArgProps: PlasmicSelectChapter__ArgProps
  }
);

export default PlasmicSelectChapter;
/* prettier-ignore-end */
